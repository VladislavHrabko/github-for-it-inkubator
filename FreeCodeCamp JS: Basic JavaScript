Record Collection:
function updateRecords(records, id, prop, value) {
  if (prop !== "tracks" && value !== "") {
    records[id][prop] = value;
  } else if (prop === "tracks" && value !== "" && records[id].hasOwnProperty("tracks") === false) {
    records[id][prop] = [value];
  } else if (prop === "tracks" && value !== "") {
    records[id][prop].push(value);
  } else if (value === "") {
    delete records[id][prop];
  }
  return records;
}


Profile Lookup:
      function lookUpProfile(name, prop) {
      for (let i = 0; i < contacts.length; i++) {
        if (contacts[i].firstName === name) {
          if (prop in contacts[i]) {
            return contacts [i] [prop];
         } else {
      return 'No such property';
          }
        }
      }
      return 'No such contact';
      }


Generate Random Fractions with JavaScript:
      function randomFraction() {
        return Math.random();
        }


Generate Random Whole Numbers with JavaScript:
      function randomWholeNum() {
       return Math.floor(Math.random() * 10);
      }


Generate Random Whole Numbers within a Range:
      function randomRange(myMin, myMax) {
        return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
      }


Use the parseInt Function:
      function convertToInteger(str) {
      return parseInt(str);
      }
      
      
Use the parseInt Function with a Radix:
      function convertToInteger(str) {
      return parseInt(str, 2);
      }
      
      
Use the Conditional (Ternary) Operator:
      function checkEqual(a, b) {
      return a == b ? 'Equal' : 'Not Equal'
      }
      
Use Multiple Conditional (Ternary) Operators
      function checkSign(num) {
      return (num === 0) ? 'zero'
      : (num > 0) ? 'positive'
      : 'negative'
      }

Use Recursion to Create a Countdown:
function countdown(n){
  if (n < 1) {
    return []
  } else {
    const countArray1 = countdown(n - 1);
    countArray1.unshift(n);
    return countArray1;
  }
}

Use Recursion to Create a Range of Numbers:
function rangeOfNumbers(startNum, endNum) {
  if (endNum < startNum) {
return [];
  } else {
const array = rangeOfNumbers(startNum, endNum - 1);
array.push(endNum);
  return array;
  }
};
