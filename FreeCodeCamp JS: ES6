Compare Scopes of the var and let Keywords:
function checkScope() {
  let i = 'function scope';
  if (true) {
   let i = 'block scope';
    console.log('Block scope i is: ', i);
  }
  console.log('Function scope i is: ', i);
  return i;
}


Mutate an Array Declared with const:
s[0] = 2;
s[1] = 5;
s[2] = 7;


Prevent Object Mutation:
Object.freeze(MATH_CONSTANTS);


Use Arrow Functions to Write Concise Anonymous Functions:
const magic = () => new Date();


Write Arrow Functions with Parameters:
const myConcat = (arr1, arr2) => {
  return arr1.concat(arr2);
}


Set Default Parameters for Your Functions:
const increment = (number, value = 1) => number + value ;


Use the Rest Parameter with Function Parameters:
const sum = (...args) => args.reduce((a, b) => a + b, 0);


Use the Spread Operator to Evaluate Arrays In-Place:
arr2 = [...arr1];


Use Destructuring Assignment to Extract Values from Objects:
const {today, tomorrow} = HIGH_TEMPERATURES;


Use Destructuring Assignment to Assign Variables from Objects:
const {today: highToday, tomorrow: highTomorrow} = HIGH_TEMPERATURES;


Use Destructuring Assignment to Assign Variables from Nested Objects:
const {today: {low: lowToday}} = LOCAL_FORECAST;
const {today: {high: highToday}} = LOCAL_FORECAST;


Use Destructuring Assignment to Assign Variables from Arrays:
[a, b] = [b, a];
