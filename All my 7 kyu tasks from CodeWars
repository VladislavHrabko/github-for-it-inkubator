Task 1
You might know some pretty large perfect squares. But what about the NEXT one?
Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that
an integral perfect square is an integer n such that sqrt(n) is also an integer.
If the parameter is itself not a perfect square then -1 should be returned. You may assume the parameter is non-negative.
Examples:(Input --> Output)

Issue:
function findNextSquare(sq) {
  
  return (Math.sqrt(sq) % 1=== 0)? (Math.sqrt(sq) + 1) * (Math.sqrt(sq) + 1) : -1; 
}

Task 2
Given a string, you have to return a string in which each character (case-sensitive) is repeated once.
Examples (Input -> Output):
* "String"      -> "SSttrriinngg"
* "Hello World" -> "HHeelllloo  WWoorrlldd"
* "1234!_ "     -> "11223344!!__  "

Issue:
function doubleChar(str) {
  var total = '';
  for (var i = 0; i < str.length; i++) {
    total += str[i] + str[i];
  }
return total;
}

Task 3
Mr. Scrooge has a sum of money 'P' that he wants to invest. Before he does, he wants to know how many years 'Y' this sum 'P' has to be kept in the bank in order for it to amount to a desired sum of money 'D'.
The sum is kept for 'Y' years in the bank where interest 'I' is paid yearly. After paying taxes 'T' for the year the new sum is re-invested.
Note to Tax: not the invested principal is taxed, but only the year's accrued interest
Example:
  Let P be the Principal = 1000.00      
  Let I be the Interest Rate = 0.05      
  Let T be the Tax Rate = 0.18      
  Let D be the Desired Sum = 1100.00
After 1st Year -->
  P = 1041.00
After 2nd Year -->
  P = 1083.86
After 3rd Year -->
  P = 1128.30
Thus Mr. Scrooge has to wait for 3 years for the initial principal to amount to the desired sum.
Your task is to complete the method provided and return the number of years 'Y' as a whole in order for Mr. Scrooge to get the desired sum.
Assumption: Assume that Desired Principal 'D' is always greater than the initial principal. However it is best to take into consideration that if Desired Principal 'D' is equal to Principal 'P' this should return 0 Years.

Issue: 
function calculateYears(principal, interest, tax, desired) {
  var totalYears = 0;
  var percentPerYear = 0;
  var sum = principal;
  while (sum < desired) {
   percentPerYear = (sum * interest) - ((sum * interest) * tax);      
    sum += percentPerYear;
    totalYears++;
  }
  return totalYears;
}

Task 4
A square of squares
You like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks!
However, sometimes, you can't arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! If you just had a way to know, whether you're currently working in vainâ€¦ Wait! That's it! You just have to check if your number of building blocks is a perfect square.
Task
Given an integral number, determine if it's a square number:
In mathematics, a square number or perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself.
The tests will always use some integral number, so don't worry about that in dynamic typed languages.

Issue:
var isSquare = function(n){
  var n = Math.sqrt(n);
  return  Number.isInteger(n)
}

Task 5
In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.
Examples:
highAndLow("1 2 3 4 5");  // return "5 1"
highAndLow("1 2 -3 4 5"); // return "5 -3"
highAndLow("1 9 3 4 -5"); // return "9 -5"
Notes
All numbers are valid Int32, no need to validate them.
There will always be at least one number in the input string.
Output string must be two numbers separated by a single space, and highest number is first.

Issue:
function highAndLow(number){
var sum = [];
var splitArray = number.split(' ');
sum.push(Math.max(...splitArray));
sum.push(Math.min(...splitArray));
    return sum.join(' ');
}

Task 6
Return the number (count) of vowels in the given string.
We will consider a, e, i, o, u as vowels for this Kata (but not y).
The input string will only consist of lower case letters and/or spaces.

Issue:
function getCount(str) {
var str = str.split('');
  var count = 0;
  for (var i = 0; i < str.length; i++) {
    if (str[i] == 'a') { 
  count++;
    } else if (str[i] == 'e') {
      count++;
    } else if (str[i] == 'i') {
      count++;
    } else if (str[i] == 'o') {
      count++;
    } else if (str[i] == 'u') {
      count++;
    }
  }
  return count;
}

Task 7
You are given an odd-length array of integers, in which all of them are the same, except for one single number.
Complete the method which accepts such an array, and returns that single different number.
The input array will always be valid! (odd-length >= 3)

Issue:
function stray(numbers) {
  const sortNumbers = numbers.sort((a, b) => a - b);
  return (sortNumbers[1] == sortNumbers[0]) ? sortNumbers.pop() : sortNumbers[0];
}

Task 8
Categorize New Member
The Western Suburbs Croquet Club has two categories of membership, Senior and Open. They would like your help with an application form that will tell prospective members which category they will be placed.
To be a senior, a member must be at least 55 years old and have a handicap greater than 7. In this croquet club, handicaps range from -2 to +26; the better the player the lower the handicap.
Input
Input will consist of a list of pairs. Each pair contains information for a single potential member. Information consists of an integer for the person's age and an integer for the person's handicap.
Output
Output will consist of a list of string values (in Haskell and C: Open or Senior) stating whether the respective member is to be placed in the senior or open category.

My issue:
function openOrSenior(data) {
var answer = [];
  for (var i = 0; i < data.length; i++) {
    (data[i][0] >= 55 && data[i][1] > 7) ? answer.push('Senior') : answer.push('Open');
     }
    return answer;
}


Task 9
Jaden Casing Strings
Jaden Smith, the son of Will Smith, is the star of films such as The Karate Kid (2010) and After Earth (2013). Jaden is also known for some of his philosophy that he delivers via Twitter. When writing on Twitter, he is known for almost always capitalizing every word. 
For simplicity, you'll have to capitalize each word, check out how contractions are expected to be in the example below.
Your task is to convert strings to how they would be written by Jaden Smith. The strings are actual quotes from Jaden Smith, but they are not capitalized in the same way he originally typed them.

My issue:
String.prototype.toJadenCase = function () {
var sent = this.split(' ');
  for (var i = 0; i < sent.length; i++) {
    sent[i] = sent[i].replace(sent[i][0], sent[i][0].toUpperCase());
  }
  return sent.join(' ');
};

Task 10
Isograms
An isogram is a word that has no repeating letters, consecutive or non-consecutive. 
Implement a function that determines whether a string that contains only letters is an isogram. 
Assume the empty string is an isogram. Ignore letter case.

My issue:
function isIsogram(str){
  var str = str.toLowerCase().split('');
  for (var i = 0; i < str.length; i++) {
for (var j = i + 1; j < str.length; j++) {
  if (str[i] == str[j]) {
    return false;
  }
}
  }
  return true;
}


Task 11
Find the capitals
Write a function that takes a single string (word) as argument. 
The function must return an ordered list containing the indexes of all capital letters in the string.

My issue:
var capitals = function (word) {
  var arr = [];
  for (var i = 0; i < word.length; i++) {
    if (word[i] == word[i].toUpperCase()) {
      arr.push(word.indexOf(word[i]));
    }
  }
 return arr;
}

Task 12
Two to One
Take 2 strings s1 and s2 including only letters from a to z. 
Return a new sorted string, the longest possible, containing distinct letters - each taken only once - coming from s1 or s2.

My isuue:
function longest(s1, s2) {
var newStr = s1 + s2;
var result = '';
  for (var i = 0; i < newStr.length; i++) {
    if (result.indexOf(newStr[i]) == -1) {
      result += newStr[i];
    }
  }
  return result.split('').sort().join('');
}

Task 13
Round up to the next multiple of 5
Given an integer as input, can you round it to the next (meaning, "greater than or equal") multiple of 5?

My issue:
function roundToNext5(n){
  if (n % 5 == 0) {
    return n;
  } else {
    while (n % 5 != 0) {
      n++
    }
  }
  return n;
}

Task 14
Sort array by string length
Write a function that takes an array of strings as an argument and returns a sorted array containing the same strings, ordered from shortest to longest.
For example, if this array were passed as an argument:
["Telescopes", "Glasses", "Eyes", "Monocles"]
Your function would return the following array:
["Eyes", "Glasses", "Monocles", "Telescopes"]
All of the strings in the array passed to your function will be different lengths, so you will not have to decide how to order multiple strings of the same length.

My issue:
function sortByLength (array) {
    return array.sort((a, b) => a.length - b.length);
}

Task 15
Make a function that does arithmetic!
Given two numbers and an arithmetic operator (the name of it, as a string), return the result of the two numbers having that operator used on them.
a and b will both be positive integers, and a will always be the first number in the operation, and b always the second.
The four operators are "add", "subtract", "divide", "multiply".

My issue:
function arithmetic(a, b, operator){
{ switch (operator) {
    case "add": return a + b
    case "subtract": return a - b
    case "multiply": return a * b
    case "divide": return a / b
    }
  }
}

Task 16
Sort Numbers
Finish the solution so that it sorts the passed in array of numbers. If the function passes in an empty array or null/nil value then it should return an empty array.

My issue:
function solution(nums) {
return (nums == null) ? [] : nums.sort((a, b) => a - b);
}

Task 17
Simple Fun #176: Reverse Letter
Given a string str, reverse it and omit all non-alphabetic characters.
Example
For str = "krishan", the output should be "nahsirk".
For str = "ultr53o?n", the output should be "nortlu".
Input/Output
[input] string str
A string consists of lowercase latin letters, digits and symbols.
[output] a string

My issue:
function reverseLetter(str) {
  var newStr = str.split('').reverse().join('');
  var total = newStr.replace(/[^a-zA-Z]/g, "");
  return total;
}

Task 18
Descending Order
Your task is to make a function that can take any non-negative integer as an argument and return it with its digits in descending order. 
Essentially, rearrange the digits to create the highest possible number.

My issue:
function descendingOrder(n){
  var n1 = n.toString().split('').sort((a, b) => b - a).join('');
  return Number(n1);
}
