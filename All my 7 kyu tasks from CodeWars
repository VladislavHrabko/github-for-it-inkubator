Task 1
You might know some pretty large perfect squares. But what about the NEXT one?
Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that
an integral perfect square is an integer n such that sqrt(n) is also an integer.
If the parameter is itself not a perfect square then -1 should be returned. You may assume the parameter is non-negative.
Examples:(Input --> Output)

Issue:
function findNextSquare(sq) {
  
  return (Math.sqrt(sq) % 1=== 0)? (Math.sqrt(sq) + 1) * (Math.sqrt(sq) + 1) : -1; 
}

Task 2
Given a string, you have to return a string in which each character (case-sensitive) is repeated once.
Examples (Input -> Output):
* "String"      -> "SSttrriinngg"
* "Hello World" -> "HHeelllloo  WWoorrlldd"
* "1234!_ "     -> "11223344!!__  "

Issue:
function doubleChar(str) {
  var total = '';
  for (var i = 0; i < str.length; i++) {
    total += str[i] + str[i];
  }
return total;
}

Task 3
Mr. Scrooge has a sum of money 'P' that he wants to invest. Before he does, he wants to know how many years 'Y' this sum 'P' has to be kept in the bank in order for it to amount to a desired sum of money 'D'.
The sum is kept for 'Y' years in the bank where interest 'I' is paid yearly. After paying taxes 'T' for the year the new sum is re-invested.
Note to Tax: not the invested principal is taxed, but only the year's accrued interest
Example:
  Let P be the Principal = 1000.00      
  Let I be the Interest Rate = 0.05      
  Let T be the Tax Rate = 0.18      
  Let D be the Desired Sum = 1100.00
After 1st Year -->
  P = 1041.00
After 2nd Year -->
  P = 1083.86
After 3rd Year -->
  P = 1128.30
Thus Mr. Scrooge has to wait for 3 years for the initial principal to amount to the desired sum.
Your task is to complete the method provided and return the number of years 'Y' as a whole in order for Mr. Scrooge to get the desired sum.
Assumption: Assume that Desired Principal 'D' is always greater than the initial principal. However it is best to take into consideration that if Desired Principal 'D' is equal to Principal 'P' this should return 0 Years.

Issue: 
function calculateYears(principal, interest, tax, desired) {
  var totalYears = 0;
  var percentPerYear = 0;
  var sum = principal;
  while (sum < desired) {
   percentPerYear = (sum * interest) - ((sum * interest) * tax);      
    sum += percentPerYear;
    totalYears++;
  }
  return totalYears;
}

Task 4
A square of squares
You like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks!
However, sometimes, you can't arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! If you just had a way to know, whether you're currently working in vainâ€¦ Wait! That's it! You just have to check if your number of building blocks is a perfect square.
Task
Given an integral number, determine if it's a square number:
In mathematics, a square number or perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself.
The tests will always use some integral number, so don't worry about that in dynamic typed languages.

Issue:
var isSquare = function(n){
  var n = Math.sqrt(n);
  return  Number.isInteger(n)
}

Task 5
In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.
Examples:
highAndLow("1 2 3 4 5");  // return "5 1"
highAndLow("1 2 -3 4 5"); // return "5 -3"
highAndLow("1 9 3 4 -5"); // return "9 -5"
Notes
All numbers are valid Int32, no need to validate them.
There will always be at least one number in the input string.
Output string must be two numbers separated by a single space, and highest number is first.

Issue:
function highAndLow(number){
var sum = [];
var splitArray = number.split(' ');
sum.push(Math.max(...splitArray));
sum.push(Math.min(...splitArray));
    return sum.join(' ');
}

Task 6
Return the number (count) of vowels in the given string.
We will consider a, e, i, o, u as vowels for this Kata (but not y).
The input string will only consist of lower case letters and/or spaces.

Issue:
function getCount(str) {
var str = str.split('');
  var count = 0;
  for (var i = 0; i < str.length; i++) {
    if (str[i] == 'a') { 
  count++;
    } else if (str[i] == 'e') {
      count++;
    } else if (str[i] == 'i') {
      count++;
    } else if (str[i] == 'o') {
      count++;
    } else if (str[i] == 'u') {
      count++;
    }
  }
  return count;
}

Task 7
You are given an odd-length array of integers, in which all of them are the same, except for one single number.
Complete the method which accepts such an array, and returns that single different number.
The input array will always be valid! (odd-length >= 3)

Issue:
function stray(numbers) {
  const sortNumbers = numbers.sort((a, b) => a - b);
  return (sortNumbers[1] == sortNumbers[0]) ? sortNumbers.length - 1 : sortNumbers[0];
}
